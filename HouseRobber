
// House Robber 1
// https://leetcode.com/problems/house-robber/
class Solution {
    public int rob(int[] nums) {
 
        if(nums == null || nums.length == 0)
            return 0;
        
        if(nums.length == 1)
            return nums[0];
        if(nums.length == 2)
            return Math.max(nums[0], nums[1]);
        
        int [] money = new int[nums.length];
        money[0] = nums[0];
        money[1] = Math.max(nums[0], nums[1]);
        
        for(int i=2; i<nums.length; i++){
            
            money[i] = Math.max(money[i-2] + nums[i] , money[i-1]);
        }
        
        
        return money[nums.length-1];
    }
}

// House Robber 2
//https://leetcode.com/problems/house-robber-ii/

class Solution {
    public int rob(int[] nums) {
        
        if(nums == null || nums.length == 0)
            return 0;
        
         if(nums.length == 1)
            return nums[0];
        if(nums.length == 2)
            return Math.max(nums[0], nums[1]);
        
        return Math.max(subRob(nums, 0, nums.length-2), subRob(nums, 1, nums.length-1));
    }
    
    private int subRob(int [] nums, int start, int end){
        
        if(start > end)
            return 0;
        
        if(start == end)
            return nums[start];
        
        int [] money = new int[nums.length];
        money[start] = nums[start];
        money[start+1] = Math.max(nums[start], nums[start+1]);        
        
        for(int i=2+start; i<= end; i++)
            money[i] = Math.max(money[i-2] + nums[i] , money[i-1]);
        
        return money[end];
    }
}
